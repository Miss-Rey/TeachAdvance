# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type Course {
  id: ID!
  title: String
  description: String
  author: String
  language: String
  duration: String
  thumbnail: ImageFieldOutput
  chapter(where: ChapterWhereInput! = {}, orderBy: [ChapterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ChapterWhereUniqueInput): [Chapter!]
  chapterCount(where: ChapterWhereInput! = {}): Int
  objectives: Course_objectives_Document
  audience: Course_audience_Document
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type Course_objectives_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Course_audience_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input CourseWhereUniqueInput {
  id: ID
}

input CourseWhereInput {
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  author: StringFilter
  language: StringFilter
  duration: StringFilter
  chapter: ChapterManyRelationFilter
}

input ChapterManyRelationFilter {
  every: ChapterWhereInput
  some: ChapterWhereInput
  none: ChapterWhereInput
}

input CourseOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  author: OrderDirection
  language: OrderDirection
  duration: OrderDirection
}

input CourseUpdateInput {
  title: String
  description: String
  author: String
  language: String
  duration: String
  thumbnail: ImageFieldInput
  chapter: ChapterRelateToManyForUpdateInput
  objectives: JSON
  audience: JSON
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ChapterRelateToManyForUpdateInput {
  disconnect: [ChapterWhereUniqueInput!]
  set: [ChapterWhereUniqueInput!]
  create: [ChapterCreateInput!]
  connect: [ChapterWhereUniqueInput!]
}

input CourseUpdateArgs {
  where: CourseWhereUniqueInput!
  data: CourseUpdateInput!
}

input CourseCreateInput {
  title: String
  description: String
  author: String
  language: String
  duration: String
  thumbnail: ImageFieldInput
  chapter: ChapterRelateToManyForCreateInput
  objectives: JSON
  audience: JSON
}

input ChapterRelateToManyForCreateInput {
  create: [ChapterCreateInput!]
  connect: [ChapterWhereUniqueInput!]
}

type Chapter {
  id: ID!
  title: String
  submodules(where: SubmoduleWhereInput! = {}, orderBy: [SubmoduleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubmoduleWhereUniqueInput): [Submodule!]
  submodulesCount(where: SubmoduleWhereInput! = {}): Int
  course: Course
}

input ChapterWhereUniqueInput {
  id: ID
}

input ChapterWhereInput {
  AND: [ChapterWhereInput!]
  OR: [ChapterWhereInput!]
  NOT: [ChapterWhereInput!]
  id: IDFilter
  title: StringFilter
  submodules: SubmoduleManyRelationFilter
  course: CourseWhereInput
}

input SubmoduleManyRelationFilter {
  every: SubmoduleWhereInput
  some: SubmoduleWhereInput
  none: SubmoduleWhereInput
}

input ChapterOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input ChapterUpdateInput {
  title: String
  submodules: SubmoduleRelateToManyForUpdateInput
  course: CourseRelateToOneForUpdateInput
}

input SubmoduleRelateToManyForUpdateInput {
  disconnect: [SubmoduleWhereUniqueInput!]
  set: [SubmoduleWhereUniqueInput!]
  create: [SubmoduleCreateInput!]
  connect: [SubmoduleWhereUniqueInput!]
}

input CourseRelateToOneForUpdateInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
  disconnect: Boolean
}

input ChapterUpdateArgs {
  where: ChapterWhereUniqueInput!
  data: ChapterUpdateInput!
}

input ChapterCreateInput {
  title: String
  submodules: SubmoduleRelateToManyForCreateInput
  course: CourseRelateToOneForCreateInput
}

input SubmoduleRelateToManyForCreateInput {
  create: [SubmoduleCreateInput!]
  connect: [SubmoduleWhereUniqueInput!]
}

input CourseRelateToOneForCreateInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
}

type Submodule {
  id: ID!
  title: String
  chapter: Chapter
  notes(where: NoteWhereInput! = {}, orderBy: [NoteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NoteWhereUniqueInput): [Note!]
  notesCount(where: NoteWhereInput! = {}): Int
}

input SubmoduleWhereUniqueInput {
  id: ID
}

input SubmoduleWhereInput {
  AND: [SubmoduleWhereInput!]
  OR: [SubmoduleWhereInput!]
  NOT: [SubmoduleWhereInput!]
  id: IDFilter
  title: StringFilter
  chapter: ChapterWhereInput
  notes: NoteManyRelationFilter
}

input NoteManyRelationFilter {
  every: NoteWhereInput
  some: NoteWhereInput
  none: NoteWhereInput
}

input SubmoduleOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input SubmoduleUpdateInput {
  title: String
  chapter: ChapterRelateToOneForUpdateInput
  notes: NoteRelateToManyForUpdateInput
}

input ChapterRelateToOneForUpdateInput {
  create: ChapterCreateInput
  connect: ChapterWhereUniqueInput
  disconnect: Boolean
}

input NoteRelateToManyForUpdateInput {
  disconnect: [NoteWhereUniqueInput!]
  set: [NoteWhereUniqueInput!]
  create: [NoteCreateInput!]
  connect: [NoteWhereUniqueInput!]
}

input SubmoduleUpdateArgs {
  where: SubmoduleWhereUniqueInput!
  data: SubmoduleUpdateInput!
}

input SubmoduleCreateInput {
  title: String
  chapter: ChapterRelateToOneForCreateInput
  notes: NoteRelateToManyForCreateInput
}

input ChapterRelateToOneForCreateInput {
  create: ChapterCreateInput
  connect: ChapterWhereUniqueInput
}

input NoteRelateToManyForCreateInput {
  create: [NoteCreateInput!]
  connect: [NoteWhereUniqueInput!]
}

type Note {
  id: ID!
  content: Note_content_Document
  submodule: Submodule
}

type Note_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input NoteWhereUniqueInput {
  id: ID
}

input NoteWhereInput {
  AND: [NoteWhereInput!]
  OR: [NoteWhereInput!]
  NOT: [NoteWhereInput!]
  id: IDFilter
  submodule: SubmoduleWhereInput
}

input NoteOrderByInput {
  id: OrderDirection
}

input NoteUpdateInput {
  content: JSON
  submodule: SubmoduleRelateToOneForUpdateInput
}

input SubmoduleRelateToOneForUpdateInput {
  create: SubmoduleCreateInput
  connect: SubmoduleWhereUniqueInput
  disconnect: Boolean
}

input NoteUpdateArgs {
  where: NoteWhereUniqueInput!
  data: NoteUpdateInput!
}

input NoteCreateInput {
  content: JSON
  submodule: SubmoduleRelateToOneForCreateInput
}

input SubmoduleRelateToOneForCreateInput {
  create: SubmoduleCreateInput
  connect: SubmoduleWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createCourse(data: CourseCreateInput!): Course
  createCourses(data: [CourseCreateInput!]!): [Course]
  updateCourse(where: CourseWhereUniqueInput!, data: CourseUpdateInput!): Course
  updateCourses(data: [CourseUpdateArgs!]!): [Course]
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteCourses(where: [CourseWhereUniqueInput!]!): [Course]
  createChapter(data: ChapterCreateInput!): Chapter
  createChapters(data: [ChapterCreateInput!]!): [Chapter]
  updateChapter(where: ChapterWhereUniqueInput!, data: ChapterUpdateInput!): Chapter
  updateChapters(data: [ChapterUpdateArgs!]!): [Chapter]
  deleteChapter(where: ChapterWhereUniqueInput!): Chapter
  deleteChapters(where: [ChapterWhereUniqueInput!]!): [Chapter]
  createSubmodule(data: SubmoduleCreateInput!): Submodule
  createSubmodules(data: [SubmoduleCreateInput!]!): [Submodule]
  updateSubmodule(where: SubmoduleWhereUniqueInput!, data: SubmoduleUpdateInput!): Submodule
  updateSubmodules(data: [SubmoduleUpdateArgs!]!): [Submodule]
  deleteSubmodule(where: SubmoduleWhereUniqueInput!): Submodule
  deleteSubmodules(where: [SubmoduleWhereUniqueInput!]!): [Submodule]
  createNote(data: NoteCreateInput!): Note
  createNotes(data: [NoteCreateInput!]!): [Note]
  updateNote(where: NoteWhereUniqueInput!, data: NoteUpdateInput!): Note
  updateNotes(data: [NoteUpdateArgs!]!): [Note]
  deleteNote(where: NoteWhereUniqueInput!): Note
  deleteNotes(where: [NoteWhereUniqueInput!]!): [Note]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  course(where: CourseWhereUniqueInput!): Course
  courses(where: CourseWhereInput! = {}, orderBy: [CourseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CourseWhereUniqueInput): [Course!]
  coursesCount(where: CourseWhereInput! = {}): Int
  chapter(where: ChapterWhereUniqueInput!): Chapter
  chapters(where: ChapterWhereInput! = {}, orderBy: [ChapterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ChapterWhereUniqueInput): [Chapter!]
  chaptersCount(where: ChapterWhereInput! = {}): Int
  submodule(where: SubmoduleWhereUniqueInput!): Submodule
  submodules(where: SubmoduleWhereInput! = {}, orderBy: [SubmoduleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubmoduleWhereUniqueInput): [Submodule!]
  submodulesCount(where: SubmoduleWhereInput! = {}): Int
  note(where: NoteWhereUniqueInput!): Note
  notes(where: NoteWhereInput! = {}, orderBy: [NoteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NoteWhereUniqueInput): [Note!]
  notesCount(where: NoteWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
